name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        uv sync --dev
        uv pip install -e .[dev]

    - name: Run tests
      run: |
        uv run pytest --cov=devcontainer_tools

    - name: Lint
      run: |
        uv run ruff check .
        uv run black --check .

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.11

    - name: Build package
      run: |
        uv build

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: distributions
        path: dist/

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: distributions
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  release:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: distributions
        path: dist/

    - name: Get tag name
      id: tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Extract changelog for current version
        if [ -f CHANGELOG.md ]; then
          # Get the section for the current version
          awk '/^## \[${{ steps.tag.outputs.tag }}\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > current_changelog.md
          if [ -s current_changelog.md ]; then
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            cat current_changelog.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changelog=Release ${{ steps.tag.outputs.tag }}" >> $GITHUB_OUTPUT
          fi
        else
          echo "changelog=Release ${{ steps.tag.outputs.tag }}" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: Release ${{ steps.tag.outputs.tag }}
        body: ${{ steps.changelog.outputs.changelog }}
        files: |
          dist/*
        draft: false
        prerelease: false

  notify:
    needs: [publish, release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.publish.result == 'success' && needs.release.result == 'success' }}
      run: |
        echo "✅ Successfully released ${{ github.ref_name }}"

    - name: Notify on failure  
      if: ${{ needs.publish.result == 'failure' || needs.release.result == 'failure' }}
      run: |
        echo "❌ Release failed for ${{ github.ref_name }}"
        exit 1